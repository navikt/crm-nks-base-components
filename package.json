{
    "private": true,
    "scripts": {
        "prepare": "husky install",
        "lint": "npm run lint:lwc && npm run lint:aura",
        "lint:lwc": "eslint **/lwc/**",
        "lint:aura": "eslint **/aura/**",
        "test": "npm run lint && npm run test:unit",
        "test:unit": "sfdx-lwc-jest",
        "test:unit:watch": "sfdx-lwc-jest --watch",
        "test:unit:debug": "sfdx-lwc-jest --debug",
        "test:unit:coverage": "sfdx-lwc-jest --coverage",
        "prettier": "prettier --write \"**/*.{cls,cmp,component,css,html,js,json,md,page,trigger,xml,yaml,yml}\"",
        "prettier:verify": "prettier --list-different \"**/*.{cls,cmp,component,css,html,js,json,md,page,trigger,xml,yaml,yml}\"",
        "postinstall": "node bin/check-version.js",
        "scratch:user:enableDebug": "sfdx force:data:record:update -s User -w \"Name='User User'\" -v \"UserPreferencesUserDebugModePref=true\"",
        "scratch:enableMock:200": "echo for (Profile p : [SELECT Id FROM Profile]) {API_Controller_Mock_Settings__c mockSetting = API_Controller_Mock_Settings__c.getInstance(p.Id); mockSetting.Status__c = 'OK'; mockSetting.Status_Code__c = '200'; mockSetting.Use_Mock__c = true; upsert mockSetting;} | sfdx force:apex:execute",
        "scratch:postCreate": "npm run scratch:user:enableDebug && npm run scratch:enableMock:200 && sfdx force:apex:execute -f ./dummy-data/GenerateData.apex"
    },
    "engines": {
        "node": ">= 16.0.0",
        "npm": ">= 8.4.0"
    },
    "devDependencies": {
        "@babel/core": "^7.20.2",
        "@babel/eslint-parser": "^7.19.1",
        "@prettier/plugin-xml": "^2.2.0",
        "@sa11y/jest": "^4.0.1",
        "@salesforce/eslint-config-lwc": "^3.3.3",
        "@salesforce/sfdx-lwc-jest": "^1.1.3",
        "eslint": "^8.28.0",
        "eslint-config-prettier": "^8.5.0",
        "husky": "^8.0.2",
        "jest-canvas-mock": "^2.4.0",
        "lint-staged": "^13.0.3",
        "prettier": "^2.8.0",
        "prettier-plugin-apex": "^1.8.0",
        "semver": "^7.3.8"
    },
    "husky": {
        "hooks": {
            "pre-commit": "lint-staged"
        }
    },
    "lint-staged": {
        "**/*.{cls,cmp,component,css,html,js,json,md,page,trigger,xml,yaml,yml}": [
            "prettier --write"
        ],
        "**/{aura|lwc}/**": [
            "eslint"
        ]
    }
}
